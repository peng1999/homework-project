%code requires {
#include "ast.h"
#include "parse.h"
}

%{
#include <cstdio>
extern int yylex();
%}

%defines

%union {
    ast_node *a;
    double d;
    std::string *id;
}

%token <d> NUMBER
%token EOL
%token <id> IDENT

%right '='
%left '+' '-'
%left '*' '/'
%nonassoc UMINUS

%type <a> exp

%%
calclist:
        | calclist exp EOL      { printf("= %g\n", $2->eval(env));
                                  delete $2;
                                  prompt();
                                }
        | calclist EOL          { prompt(); }
        | calclist error EOL    { yyerrok; prompt(); }
        ;

exp: IDENT '=' exp              { $$ = new assign_node(*$1, $3); delete $1; }
   | exp '+' exp                { $$ = new op_node(op_node::PLUS, $1, $3); }
   | exp '-' exp                { $$ = new op_node(op_node::MINUS, $1, $3); }
   | exp '*' exp                { $$ = new op_node(op_node::MUL, $1, $3); }
   | exp '/' exp                { $$ = new op_node(op_node::DIV, $1, $3); }
   | '|' exp '|'                { $$ = new op_node(op_node::ABS, $2, nullptr); }
   | '(' exp ')'                { $$ = $2; }
   | '-' exp %prec UMINUS       { $$ = new op_node(op_node::UMINUS, $2, nullptr); }
   | NUMBER                     { $$ = new num_node($1); }
   | IDENT                      { $$ = new var_node(*$1); delete $1; }
   ;

%%

