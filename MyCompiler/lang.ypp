%code requires {
#include "ast.h"
#include "parse.h"
}

%{
#include <cstdio>
#include <iostream>
#include <limits>
extern int yylex();
%}

%defines

%union {
    ast_node *a;
    double d;
    std::string *id;
    vector<ast_node*> *enl;
    vector<symbol> *syl;
}

%token <d> NUMBER
%token EOL
%token <id> IDENT
/* keywords */
%token INF FUN IF ELSE

%right '='
%left '+' '-'
%left '*' '/'
%nonassoc UMINUS

%type <a> exp
%type <enl> exp_list exp_list_semi
%type <syl> name_list

%destructor { delete $$; } <id>

%%
calclist:
        | calclist exp EOL      { auto result = $2->eval(env);
                                  if (result.is_num())
                                      std::cout << "= ";
                                  std::cout << result << std::endl;
                                  delete $2;
                                  prompt();
                                }
        | calclist EOL          { prompt(); }
        | calclist error EOL    { yyerrok; prompt(); }
        ;

exp: IDENT '=' exp              { $$ = new assign_node(*$1, $3); }
   /* function declaration */
   | FUN IDENT '(' name_list ')' '=' exp
                                { $$ = new fun_def_node(*$2, *$4, $7); delete $4; }
   /* if statment */
   | IF exp '{' exp_list_semi '}'
                                { $$ = new if_node($2, *$4); delete $4; }
   | IF exp '{' exp_list_semi '}' ELSE '{' exp_list_semi '}'
                                { $$ = new if_node($2, *$4, *$8); delete $4; delete $8; }
   /* block */
   | '{' exp_list_semi '}'      { $$ = new block_node(*$2); delete $2; }
   /* function call */
   | IDENT '(' exp_list ')'     { $$ = new fun_call_node(*$1, std::move(*$3)); }
   | exp '+' exp                { $$ = new op_node(op_type::PLUS, $1, $3); }
   | exp '-' exp                { $$ = new op_node(op_type::MINUS, $1, $3); }
   | exp '*' exp                { $$ = new op_node(op_type::MUL, $1, $3); }
   | exp '/' exp                { $$ = new op_node(op_type::DIV, $1, $3); }
   | '|' exp '|'                { $$ = new op_node(op_type::ABS, $2); }
   | '(' exp ')'                { $$ = $2; }
   | '-' exp %prec UMINUS       { $$ = new op_node(op_type::UMINUS, $2); }
   | NUMBER                     { $$ = new num_node($1); }
   | INF                        { $$ = new num_node(std::numeric_limits<double>::infinity()); }
   | IDENT                      { $$ = new var_node(*$1); }
   ;

exp_list:                       { $$ = new vector<ast_node*> {}; }
        | exp                   { $$ = new vector<ast_node*> {$1}; }
        | exp_list ',' exp      { $1->push_back($3); $$ = $1; }
        ;

exp_list_semi:                  { $$ = new vector<ast_node*> {}; }
        | exp                   { $$ = new vector<ast_node*> {$1}; }
        | exp_list_semi EOL
        | exp_list_semi ';'
        | exp_list_semi EOL exp { $1->push_back($3); $$ = $1; }
        | exp_list_semi ';' exp { $1->push_back($3); $$ = $1; }
        ;

name_list:                      { $$ = new vector<symbol> {}; }
         | IDENT                { $$ = new vector<symbol> {symbol {*$1}}; }
         | name_list ',' IDENT  { $1->push_back(symbol(*$3)); $$ = $1; }

%%

